=>Steps:
    1. The nodes of the graph will be stored as (u,v,weight);
    2. Sort all the nodes in the adj accoding to the weights.
    3. For each Node in the adj, we check if par(u)!=par(v), if they are equal then a cycle would be made and we can't have cycle in a mst.
    
    
class Solution{
    class Node{
        int u;
        int v;
        int w;
        Node(int _u, int _v, int _w){
            u=_u;
            v=_v;
            w=_w;
        }
        int getV(){return v};
        int getU(){return u};
        int getW(){return w};
    }
    
    class SortComparator implements Comparator<Node>{
        @Override
        public int compare(Node n1, Node n2){
            if(n1.getW()<n2.getW()) return -1;
            else if(n2.getW()>n2.getW()) return 1;
            else return 0;
        }
    }
    
    public void getParent(int u, int[] parent){
        if(u==parent[u]) return u;
        return parent[u]=getParent(parent[u],parent);
    }
    
    public void union(int u, int v, int parent[], int rank[]){
        u=getParent(u,parent);
        v=getParent(v,parent);
        if(rank[u]<rank[v]){
            parent[u]=v;
        }
        else if(rank[u]>rank[v]){
            parent[v]=u;
        }
        else{
            parent[v]=u;
            rank[u]++;
        }
    }
    
    public void KruskalsAlgo()(int V, ArrayLis<Node> adj){
        Collections.sort(adj,new SortComparator()); //Sort the adj list accoding to the weight here.
        int[] parent= new int[V];
        int[] rank=new int[V];
        int costMST=0;
        ArrayList<Node> mst= new ArrayList<>();
        for(int i=0; i<V; i++){
            parent[i]=i; //Signifies all the nodes are components in themselves.
            rank[i]=0;
            }
            
        for(Node it: adj){
            if(getParent(it.getU(),parent)!=getParent(it.getV(),parent)){//To check if we join then there would be no cycle
                union(it.getU(),it.getV(),parent,rank);
                costMST+=it.getW();
                mst.add(it);
            }
        }
        System.out.println(costMST);
        for(Node it: mst){
            System.out.println(it.getU()+" "+it.getV());
        }
    }
    
    public static void main(String args[]){
        int n=5;
        ArrayList<Node> adj= new ArrayList<>();
        //adding the edges in the form of (u,v,w)
        adj.add(new Node(0,1,2));
        adj.add(new Node(0,3,6));
        adj.add(new Node(1,3,8));
        adj.add(new Node(1,2,3));
        adj.add(new Node(1,4,5));
        adj.add(new Node(2,4,7));
        
        KruskalsAlgo(n,adj);
    }
}
