Link: https://leetcode.com/problems/path-with-maximum-probability/

T(n): O(edges*log(n))

class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        Map<Integer,Double>[] graph= new Map[n];
        for (int i = 0; i < n; i++)
			graph[i] = new HashMap<>();
        
        for(int i=0; i<edges.length; i++){
            graph[edges[i][0]].put(edges[i][1],succProb[i]);
            graph[edges[i][1]].put(edges[i][0],succProb[i]);
        }
        double[] probs= new double[n];
        probs[start]=1.0;
        PriorityQueue<Integer> pq= new PriorityQueue<>(Comparator.comparingDouble(i->-probs[i]));
        pq.add(start);
        
        
        while(!pq.isEmpty()){
            int node=pq.poll();
            if(node==end) return probs[end];
            for(int neigh: graph[node].keySet()){
                double edgeprob= graph[node].get(neigh);
                if(edgeprob*probs[node]>probs[neigh]){
                    probs[neigh]=edgeprob*probs[node];
                    pq.add(neigh);
                }
            }
        }
        return 0.0;
    }
}
