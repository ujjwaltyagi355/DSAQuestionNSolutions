Ques Link: https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/

class Solution {
    int[][] dirs = new int[][]{{0,1},{0,-1},{-1,0},{1,0}};
    public int shortestPath(int[][] grid, int k) {
        int n=grid.length;
        int m=grid[0].length;
        if (k >= m+n-2) return m+n-2;// Manhattan distance
        if(n==0 || m==0) return -1;
        int[][] obstacleCount= new int[n][m]; // to keep track of previous obstacle count
        boolean[][] vis= new boolean[n][m]; //to keep track of the nodes which are already visited
        
        Queue<int[]> q=new LinkedList<>();
        q.add(new int[]{0,0,0});
        int step=0;
        
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0; i<size; i++){
                int[] node=q.poll();
                int r=node[0];
                int c=node[1];
                if(r==n-1 && c==m-1) return step;
                int currentObstacleCount=node[2];
                for(int[] dir: dirs){
                    int newr=r+dir[0];
                    int newc=c+dir[1];
                    if((newr<0)==true || (newc<0)==true || (newr>=n)==true || (newc>=m)==true) continue;
                    int oldObstacles=obstacleCount[newr][newc];
                    int newObstacleCount=currentObstacleCount+ (grid[newr][newc]== 1 ? 1 : 0);
                    
                    if((!vis[newr][newc] || newObstacleCount<oldObstacles) && newObstacleCount<=k){ // if not visited or the newobstacle count is lesser then the old one, we update the obstaclecount and put the element again in the queue.
                        q.add(new int[]{newr,newc,newObstacleCount});
                        vis[newr][newc]=true;
                        obstacleCount[newr][newc]=newObstacleCount;
                        
                    }
                }
            }
            step++;
        }
        return -1;
        
    }
}
