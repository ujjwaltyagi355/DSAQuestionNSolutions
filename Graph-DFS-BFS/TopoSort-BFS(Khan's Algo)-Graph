=> Here, we make use of the indegree:
  1. all elements with indegree =0 are added to the queue.
  2. we iterate of the adjancecy list and remove the dependencies, therefore we would need to reduce the indegree as well.
  3. We keep on adding the vertices whose indegree becomes zero in this case.



class Solution
{
    
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int[] ans=new int[V];
        Queue<Integer> q=new LinkedList<>();
        int[] indegree=new int[V];
        for(int i=0; i<V; i++){ //Calculating the indegree for all the vertices
            for(int it: adj.get(i)){
                indegree[it]++;
            }
        }
        
        for(int i=0; i<V; i++){
            if(indegree[i]==0){//Putting all vertices with indegree 0 in the queue
                q.offer(i);
            }
        }
        int ind=0;
        
        while(!q.isEmpty()){
            int node=q.poll();//When a node is removed from the queue, a dependency reduces hence we decrese the indegree of adjacent nodes
            ans[ind++]=node;
            
            for(int it: adj.get(node)){
                    indegree[it]--;
                    if(indegree[it]==0){
                        q.offer(it);
                    }
                }
            }
        
        
        
        return ans;
    }
}
