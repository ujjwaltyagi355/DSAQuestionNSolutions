**BFS**

T(n): O(n)

class Solution {
    public int minJumps(int[] arr) {
        int n=arr.length;
        boolean[] visited= new boolean[n];
        Queue<Integer> q= new LinkedList<Integer>();
        q.add(0);
        visited[0]=true;
        
        //Now we create a map wherein we store all the values mapped to the indexes where they occur.
        HashMap<Integer,List<Integer>> indexes= new HashMap<>();
        for(int i=0; i<n; i++){
            indexes.computeIfAbsent(arr[i],x->new ArrayList<Integer>()).add(i);
        }
        int steps=0;
        while(!q.isEmpty()){
            int size=q.size();
            //Traversing all the steps in the previous level.
            while(size-->0){
                int cur=q.poll();
                if(cur==n-1) return steps;
                //Considering cur-1
                if(cur-1>=0 && !visited[cur-1]){
                    visited[cur-1]=true;
                    q.add(cur-1);
                }
                //Considering cur+1
                if(cur+1<n && !visited[cur+1]){
                    visited[cur+1]=true;
                    q.add(cur+1);
                }
                //Traversing the elements with the value same as the index of the cur.
                if(indexes.containsKey(arr[cur])){
                    for(int next: indexes.get(arr[cur])){
                        if(next!=cur){
                            visited[next]=true;
                            q.add(next);
                        }
                        
                    }
                }
                //Now we don't require this mapping so we will remove it.
                indexes.remove(arr[cur]);
            }
            steps++;
        }
        return -1;
    }
    
}
