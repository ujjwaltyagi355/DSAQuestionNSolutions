Link: https://leetcode.com/problems/find-all-people-with-secret/

**BFS+PQ**
T(n): O(m*logm) where m is the number of meetings

class Solution {
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
        
        //Steps:
        //1. Create a graph <node1, [node2, time]> using hashmap.
        //2. Add the {0,0} and {firstPerson,0} to the PQ
        //3. Now apply BFS on the PQ and adding children in the process. MArk the elements as visited when you take it out of the queue.
        
        HashMap<Integer, List<int[]>> graph= new HashMap<>();
        HashSet<Integer> visited= new HashSet<>();
        //Bulding the graph
        for(int[] m: meetings){
            graph.computeIfAbsent(m[0],x->new ArrayList<>()).add(new int[]{m[1],m[2]});
            graph.computeIfAbsent(m[1],x->new ArrayList<>()).add(new int[]{m[0],m[2]});
        }
        
        PriorityQueue<int[]> pq= new PriorityQueue<>((a,b)->a[1]-b[1]);
        
        //Addding the 0 and firstPerson element in the PQ
        pq.add(new int[]{0,0});
        pq.add(new int[]{firstPerson,0});
        
        while(!pq.isEmpty()){
            int[] node=pq.poll();
            int time=node[1];
            //if already visited node ahead
            if(visited.contains(node[0])) continue;
            //mark the element as visited
            visited.add(node[0]);
            //if the given node have any neighbours or meetings involving him them traverse the childrens
            if(graph.containsKey(node[0])){
                for(int[] child: graph.get(node[0])){
                    //if child's time  is greater then only add it to the PQ but if it's not then they would have met sometime before when node[0] didnot have the secret so this node will also not have the secret now.
                    if(child[1]>=time){
                        pq.add(child);
                    }
                }
            }
            
            
        }
        //The visited array contains the all the person with the secret son return it
        return new ArrayList<>(visited);
    }
}


**DSU**

Steps:
1. Sort the meetings on the basis of the time.
2. Now connect the nodes using union.
3. if the element added do not have the same parent as 0 i.e. they do not know the secret at this point in time, beacuse even there parent doesn't know it yet.
4. d-Union the above element or else if it's current parent unions with 0 in future then this will too and that would be wrong since the parent itself didn't know the secret first time and now the meeting is over so the secret can't be transferred now at all.
5. Return all the elements with parent as 0, they are the ones who know the secret.

T(n): O(m*logm) where m is the number of meetings


class Solution {
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
        //Sort the array based on the time of the meetings
        Arrays.sort(meetings, ((a,b)->a[2]-b[2]));
        
        UF uf= new UF(n);
        //Connect 0 and firstPerson
        uf.union(0,firstPerson);
        int i=0;
        //Traverse through all the meetings here
        while(i<meetings.length){
            //Take the time as the current time to traverse all the meetings with the time similar to this time
            int currTime=meetings[i][2];
            
            Set<Integer> pool = new HashSet<>();
            //Check if the time is similar to the current time
            while(i<meetings.length && meetings[i][2]==currTime){
                int[] currentMeeting=meetings[i];
                uf.union(currentMeeting[0],currentMeeting[1]);
                pool.add(currentMeeting[0]);
                pool.add(currentMeeting[1]);
                i++;
                }
            //check of the disconnected ones wrt 0 and remove them
            for(int j: pool){
                if(!uf.connected(0,j)){
                    uf.disconnect(j);
                }
            }
            
            
        }
        List<Integer> ans= new ArrayList<Integer>();
        //return all the nodes whihc are connected to the 0 node    
        for(int j=0; j<n; j++){
            if(uf.connected(0,j)){
                ans.add(j);
            }
        }
        return ans;
    }
    class UF{
    int[] parent, rank;
    
    public UF(int n){
        parent=new int[n];
        rank=new int[n];
        for(int i=0; i<n; i++){
            parent[i]=i;
        }
    }
    
    public void union(int p, int q){
        p=find(p);
        q=find(q);
        if(p==q) return;
        if(rank[p]<rank[q]){
            parent[p]=q;
        }
        else{
            parent[q]=p;
            rank[p]++;
        }
    }
    
    public int find(int p){
        while(parent[p]!=p){
            p=parent[parent[p]];
        }
        return p;
    }
    
    public boolean connected(int p, int q){
        return find(p)==find(q);
    }
    
    public void disconnect(int q){
        parent[q]=q;
        rank[q]=0;
    }
}
}


