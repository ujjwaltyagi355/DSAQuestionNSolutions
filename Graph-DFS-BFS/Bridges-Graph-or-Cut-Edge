class Solution
{   
    public static int helper(int node, int parent, int[] vis, int[] time, int[] low, int timer, ArrayList<ArrayList<Integer>> adj, int c, int d){
        vis[node]=1;
        time[node]=low[node]=timer++;
        for(int it: adj.get(node)){
            if(it==parent) continue; //Do not consider the parent.
            if(vis[it]==0){
                if(helper(it,node,vis,time,low,timer,adj,c,d)==1) return 1; //Tarvesing the DFS on a not visited node.
                low[node]=Math.min(low[node],low[it]); //now after the dfs is done we update the low[node] with respect to the lows of its adjacent
                if(low[it]>time[node]){ //if this holds true we found the bridge
                    if((it==c && node==d) || (it==d && node==c)) return 1;
                }
            }
            else{ //if the node is visited already, then update nodes low with respect to it neighboours.
                low[node]=Math.min(low[node],time[it]);
            }
            
        }
        return 0;
    }
    //Function to find if the given edge is a bridge in graph.
    static int isBridge(int V, ArrayList<ArrayList<Integer>> adj,int c,int d)
    {
        // code here
        int[] time= new int[V];
        int[] low= new int[V];
        Arrays.fill(time,-1);
        Arrays.fill(low,-1);
        int[] vis=new int[V];
        int timer=0;
        int ans=0;
        for(int i=0; i<V; i++){
            if(vis[i]==0){
                if(helper(i,-1,vis,time,low,0,adj,c,d)==1) return 1;
                }
            }
            return 0;
        }
        
    }
